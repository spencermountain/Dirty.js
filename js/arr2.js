// Generated by CoffeeScript 1.6.3
var arr, equals, objarr, simplearr;

arr = (function(obj) {
  var type;
  if (obj == null) {
    obj = {
      soft: false
    };
  }
  arr = {};
  type = function(obj) {
    var classToType, myClass, name, _i, _len, _ref;
    if (obj === void 0 || obj === null) {
      return String(obj);
    }
    classToType = new Object;
    _ref = "Boolean Number String Function Array Date RegExp".split(" ");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      name = _ref[_i];
      classToType["[object " + name + "]"] = name.toLowerCase();
    }
    myClass = Object.prototype.toString.call(obj);
    if (myClass in classToType) {
      return classToType[myClass];
    }
    return "object";
  };
  arr.grab = {
    fn: function(p) {
      var the;
      the = this;
      if (type(p) === "array") {
        return the.map(function(s) {
          return p.map(function(f) {
            return s[f];
          });
        });
      }
      return the.map(function(s) {
        return s[p];
      });
    },
    alias: ['collect', 'transform', 'pluck'],
    test: function(arr1, objarr) {
      return equals(objarr.grab("a"), [4, 9, null]);
    }
  };
  arr.print = {
    fn: function() {
      return console.log(JSON.stringify(this, null, 2));
    },
    alias: [],
    description: "",
    test: function(arr1, objarr) {
      return true;
    }
  };
  arr.to_tsv = {
    fn: function() {
      return console.log(this.join("\t"));
    },
    alias: ["tsv"],
    description: "",
    test: function(arr1, objarr) {
      return true;
    }
  };
  arr.template = {
    fn: function(fn, join) {
      if (join == null) {
        join = "\n";
      }
      return this.map(fn).join(join);
    },
    alias: ["generate", "html", "to_string", "haml"],
    description: "",
    test: function(arr1, objarr) {
      return equals(arr1.generate(function(v) {
        return v;
      }), "1\n2\n3\n5\n3\n4");
    }
  };
  arr.clone = {
    fn: function() {
      return JSON.parse(JSON.stringify(this));
    },
    alias: [],
    description: "",
    test: function(arr1, objarr) {
      return equals([2].clone(), [2]);
    }
  };
  arr.sum = {
    fn: function(field) {
      if (field == null) {
        field = null;
      }
      if (field) {
        return this.reduce(function(a, b) {
          return a + b[field];
        }, 0);
      }
      return this.reduce((function(a, b) {
        return a + b;
      }), 0);
    },
    alias: ["total"],
    description: "",
    test: function(arr1, objarr) {
      return equals(arr1.sum(), 18);
    }
  };
  arr.percentage = {
    fn: function(fn) {
      var passes;
      if (fn == null) {
        fn = function(v) {
          return v;
        };
      }
      if (this.length === 0) {
        return 0;
      }
      passes = this.filter(fn);
      return parseInt((passes.length / this.length) * 100);
    },
    alias: ["percent"],
    description: "",
    test: function(arr1, objarr) {
      return equals(arr1.percentage(function(v) {
        return v > 2;
      }), 66);
    }
  };
  arr.average = {
    fn: function(field) {
      var sum;
      if (this.length === 0) {
        return 0;
      }
      sum = 0;
      if (field) {
        sum = this.reduce(function(a, b) {
          return a + b[field];
        }, 0);
      } else {
        sum = this.reduce(function(a, b) {
          return a + b;
        }, 0);
      }
      return sum / this.length;
    },
    alias: ["mean"],
    description: "",
    test: function(arr1, objarr) {
      return arr1.average() === 3;
    }
  };
  arr.spigot = {
    fn: function(fn) {
      var all, the;
      the = this;
      all = {
        "true": [],
        "false": []
      };
      the.forEach(function(v) {
        if (fn(v)) {
          return all["true"].push(v);
        } else {
          return all["false"].push(v);
        }
      });
      return all;
    },
    alias: ["moses", "faucet"],
    description: "",
    test: function(arr1, objarr) {
      return equals(arr1.spigot(function(v) {
        return v > 2;
      }), {
        "true": [3, 5, 3, 4],
        "false": [1, 2]
      });
    }
  };
  arr.duplicates = {
    fn: function(field) {
      var i, results, the;
      the = this;
      if (field) {
        the = the.grab(field);
      }
      the = the.sort();
      results = [];
      i = 0;
      while (i < the.length - 1) {
        if (the[i + 1] === the[i]) {
          results.push(the[i]);
        }
        i++;
      }
      return results;
    },
    alias: ["dupes", "doubles"],
    description: "",
    test: function(arr1, objarr) {
      return equals(arr1.duplicates(), [3]);
    }
  };
  arr.overlap = {
    fn: function(arr2) {
      return this.filter(function(v) {
        return arr2.some(function(v2) {
          return v === v2;
        });
      });
    },
    alias: ["intersection"],
    description: "",
    test: function(arr1, objarr) {
      return equals(arr1.overlap([2, 3]), [2, 3, 3]);
    }
  };
  arr.topk = {
    fn: function() {
      var freq, i, length, the, top;
      the = this;
      length = the.length || 1;
      freq = {};
      i = the.length - 1;
      while (i > -1) {
        if (freq[the[i]] == null) {
          freq[the[i]] = 1;
        } else {
          freq[the[i]]++;
        }
        i--;
      }
      top = Object.keys(freq).sort(function(a, b) {
        return freq[b] - freq[a];
      });
      return top.map(function(v) {
        return {
          value: v,
          count: freq[v]
        };
      });
    },
    alias: ["sort_by_freq"],
    description: "",
    test: function(arr1, objarr) {
      return arr1.topk()[0].count === 2;
    }
  };
  arr.flatten = {
    fn: function() {
      return this.reduce((function(a, b) {
        return a.concat(b);
      }), []);
    },
    alias: [""],
    description: "one-level flatten of arrays within arrays",
    test: function(arr1, objarr) {
      return equals([1, 2, [3], [[4, 5], 6]].flatten(), [1, 2, 3, [4, 5], 6]);
    }
  };
  arr.shuffle = {
    fn: function() {
      return this.sort(function(a, b) {
        return Math.round(Math.random()) - 0.5;
      });
    },
    alias: [""],
    description: "randomize the order of an array",
    test: function(arr1, objarr) {
      return arr1.shuffle().sum() === arr1.sum();
    }
  };
  arr.find = {
    fn: function(fn) {
      var done;
      done = null;
      this.some(function(v) {
        if (fn(v)) {
          done = v;
          return true;
        }
        return false;
      });
      return done;
    },
    alias: [""],
    description: "get the first matching element of an array then stop looking",
    test: function(arr1, objarr) {
      return equals(objarr.find(function(o) {
        return o.b === 2;
      }), {
        a: 4,
        b: 2
      });
    }
  };
  arr.first = {
    fn: function(filt) {
      var the;
      the = this;
      if (typeof filt === "undefined") {
        return the[0];
      }
      filt = filt || 1;
      if (type(filt) === "function") {
        return the.find(filt);
      } else {
        return the.slice(0, filt);
      }
    },
    alias: [""],
    description: "grab first matching element(s) of an array",
    test: function(arr1, objarr) {
      console.log(arr1.first(2));
      return equals(arr1.first(2), [1, 2]);
    }
  };
  arr.last = {
    fn: function(filt) {
      var the;
      the = this.reverse();
      return the.first(filt);
    },
    alias: [""],
    description: "grab last matching element of an array",
    test: function(arr1, objarr) {
      console.log(arr1.last());
      return equals(arr1.last(), [4]);
    }
  };
  Object.keys(arr).forEach(function(i) {
    Object.defineProperty(Array.prototype, i, {
      value: arr[i].fn,
      configurable: true,
      enumerable: false
    });
    return arr[i].alias.forEach(function(a) {
      return Object.defineProperty(Array.prototype, a, {
        value: arr[i].fn,
        configurable: true,
        enumerable: false
      });
    });
  });
  return arr;
})();

equals = function(a1, a2) {
  return JSON.stringify(a1) === JSON.stringify(a2);
};

simplearr = [1, 2, 3, 5, 3, 4];

objarr = [
  {
    a: 4,
    b: 2
  }, {
    a: 9
  }, {
    b: 8
  }
];

Object.keys(arr).forEach(function(i) {
  return console.log(i + " " + arr[i].test(simplearr, objarr));
});

arr = [1, 2, 3, 5, 3, 4];

/*
//@ sourceMappingURL=arr2.map
*/
