// Generated by CoffeeScript 1.6.3
var dirty, x;

dirty = (function() {
  var descriptions, documentation, fns, redirects;
  documentation = function() {
    var arr;
    arr = [];
    arr.push("##Object methods");
    Object.keys(fns.obj).forEach(function(v) {
      return arr.push("* __." + v + "__ ( ) ");
    });
    arr.push("");
    arr.push("##Array methods");
    Object.keys(fns.arr).forEach(function(v) {
      return arr.push("* __." + v + "__ ( )");
    });
    arr.push("");
    arr.push("##Number methods");
    Object.keys(fns.num).forEach(function(v) {
      return arr.push("* __x." + v + "__ ( )");
    });
    arr.push("");
    arr.push("##String methods");
    Object.keys(fns.str).forEach(function(v) {
      return arr.push("* __str." + v + "__ ( )");
    });
    return arr.join("\n");
  };
  dirty = {};
  fns = {
    arr: {},
    obj: {},
    num: {},
    str: {}
  };
  redirects = {};
  descriptions = {};
  fns.arr.grab = function(p) {
    if (typeof p === "object" && p.length) {
      return this.map(function(s) {
        return p.map(function(f) {
          return s[f];
        });
      });
    }
    return this.map(function(s) {
      return s[p];
    });
  };
  fns.arr.collect = fns.arr.grab;
  fns.arr.transform = fns.arr.grab;
  fns.arr.prepend = Array.prototype.unshift;
  fns.arr.append = Array.prototype.push;
  fns.arr.clone = function() {
    return JSON.parse(JSON.stringify(this));
  };
  fns.arr.copy = fns.arr.clone;
  fns.arr.stat = function(callback) {
    var obj, types;
    types = this.map(function(v) {
      if (typeof v === "object") {
        if (v == null) {
          return "null";
        } else {
          if (v.length) {
            return "array";
          }
        }
      } else {
        return typeof v;
      }
    }).topk(true);
    obj = {
      length: this.length,
      types: types.map(function(v) {
        return parseInt(v.percentage) + "% " + v.value + "s";
      }).join(", "),
      dupes: this.dupes().topk(true).map(function(v) {
        return [v.value, v.count + 1];
      }).to_obj(),
      falsy: this.length - this.compact().length,
      empty: this.filter(function(v) {
        if (Object.prototype.toString.call(v) === "[object Array]" && v.length === 0) {
          return true;
        }
        if (Object.prototype.toString.call(v) === "[object Object]" && v.keys.length === 0) {
          return true;
        }
        return false;
      }).length
    };
    if (callback) {
      return callback(obj);
    }
    return console.log(JSON.stringify(obj, null, 2));
  };
  fns.arr.stats = fns.arr.stat;
  fns.arr.spigot = function(fn) {
    var all, arr;
    arr = this;
    all = {
      "true": [],
      "false": []
    };
    arr.forEach(function(v) {
      if (fn(v)) {
        return all["true"].push(v);
      } else {
        return all["false"].push(v);
      }
    });
    return all;
  };
  fns.arr.moses = fns.arr.spigot;
  fns.arr.max = function(field) {
    if (field) {
      return this.sort(function(a, b) {
        return b[field] - [field];
      })[0];
    }
    return Math.max.apply(null, this);
  };
  fns.arr.mean_average_precision = function(results) {
    var found, precisions;
    if (results.length === 0 && this.length === 0) {
      return 1;
    }
    precisions = [];
    found = 0;
    this.forEach(function(w, i) {
      var precision;
      i++;
      if (results.some(function(s) {
        return s === w;
      })) {
        found++;
      }
      precision = found / i;
      return precisions.push(precision);
    });
    return precisions.average();
  };
  fns.arr.to_tsv = function() {
    return console.log(this.join("\t"));
  };
  fns.arr.tsv = fns.arr.to_tsv;
  fns.arr.recall = function(wanted) {
    var overlap, results;
    results = this;
    if (wanted.length === 0) {
      return 0;
    }
    overlap = results.overlap(wanted).length;
    return overlap / wanted.length;
  };
  fns.arr.precision = function(wanted) {
    var overlap, results;
    results = this;
    if (results.length === 0) {
      return 0;
    }
    overlap = results.overlap(wanted).length;
    return overlap / results.length;
  };
  fns.arr.sum = function(field) {
    if (field) {
      return this.reduce(function(a, b) {
        return a + b[field];
      }, 0);
    }
    return this.reduce((function(a, b) {
      return a + b;
    }), 0);
  };
  fns.arr.percentage = function(fn) {
    var passes;
    passes = this.filter(fn);
    return parseInt((passes.length / this.length) * 100);
  };
  fns.arr.select = Array.prototype.filter;
  fns.arr.must = fns.arr.select;
  fns.arr.reject = function(filter) {
    if (typeof filter === "function") {
      return this.filter(function(v) {
        return !filter(v);
      });
    } else if (typeof filter === "number" || typeof filter === "string") {
      return this.filter(function(v) {
        return v !== filter;
      });
    } else if (typeof filter === "object") {
      filter = JSON.stringify(filter);
      return this.filter(function(v) {
        return JSON.stringify(v) !== filter;
      });
    }
  };
  fns.arr.kill = fns.arr.reject;
  fns.arr.remove = fns.arr.reject;
  fns.arr.average = function(field) {
    var sum;
    if (this.length === 0) {
      return 0;
    }
    sum = 0;
    if (field) {
      sum = this.reduce(function(a, b) {
        return a + b[field];
      }, 0);
    } else {
      sum = this.reduce(function(a, b) {
        return a + b;
      }, 0);
    }
    return sum / this.length;
  };
  fns.arr.mean = fns.arr.average;
  fns.arr.strings = function() {
    return this.filter(function(v) {
      return typeof v === "string";
    });
  };
  fns.arr.numbers = function() {
    return this.filter(function(v) {
      return typeof v === "object";
    });
  };
  fns.arr.objects = function() {
    return this.filter(function(v) {
      return typeof v === "object";
    });
  };
  fns.arr.truthy = function() {
    return this.filter(function(v) {
      return v;
    });
  };
  fns.arr.duplicates = function(field) {
    var arr, i, results;
    arr = this;
    if (field) {
      arr = arr.grab(field);
    }
    arr = arr.sort();
    results = [];
    i = 0;
    while (i < arr.length - 1) {
      if (arr[i + 1] === arr[i]) {
        results.push(arr[i]);
      }
      i++;
    }
    return results;
  };
  fns.arr.dupes = fns.arr.duplicates;
  fns.arr.overlap = function(arr2) {
    return this.filter(function(v) {
      return arr2.some(function(v2) {
        return v === v2;
      });
    });
  };
  fns.arr.intersection = fns.arr.overlap;
  fns.arr.isin = fns.arr.overlap;
  fns.arr.just = fns.arr.overlap;
  fns.arr.missing_from = function(arr2) {
    return this.filter(function(v) {
      return !arr2.some(function(v2) {
        return v === v2;
      });
    });
  };
  fns.arr.has_overlap = function(arr2) {
    return this.some(function(v) {
      return arr2.some(function(v2) {
        return v === v2;
      });
    });
  };
  fns.arr.overlaps = fns.arr.has_overlap;
  fns.arr.topk = function(verbose) {
    var freq, i, length, myArray, newArray, value;
    myArray = this;
    newArray = [];
    length = myArray.length || 1;
    freq = {};
    i = myArray.length - 1;
    i = void 0;
    while (i > -1) {
      value = myArray[i];
      if (freq[value] == null) {
        freq[value] = 1;
      } else {
        freq[value]++;
      }
      i--;
    }
    for (value in freq) {
      newArray.push(value);
    }
    newArray = newArray.sort(function(a, b) {
      return freq[b] - freq[a];
    }).map(function(v) {
      return {
        value: v,
        count: freq[v],
        percentage: ((freq[v] / length) * 100).toFixed(2)
      };
    });
    if (verbose) {
      return newArray;
    } else {
      return newArray.map(function(s) {
        return s.value;
      });
    }
  };
  fns.arr.freq = fns.arr.topk;
  fns.arr.frequency = fns.arr.topk;
  fns.arr.each = function(fn) {
    return this.forEach(fn);
  };
  fns.arr.loop = fns.arr.each;
  fns.arr.uniq = function() {
    var a, i, l, u;
    u = {};
    a = [];
    i = 0;
    l = this.length;
    while (i < l) {
      if (u.hasOwnProperty(this[i])) {
        continue;
      }
      a.push(this[i]);
      u[this[i]] = 1;
      ++i;
    }
    return a;
  };
  fns.arr.unique = fns.arr.uniq;
  fns.arr.uniq_by = fns.arr.uniq;
  fns.arr.unique_by = fns.arr.uniq;
  fns.arr.compact = function() {
    return this.filter(function(v) {
      if (Object.prototype.toString.call(v) === "[object Array]" && v.length === 0) {
        return false;
      }
      if (Object.prototype.toString.call(v) === "[object Object]" && v.keys.length === 0) {
        return false;
      }
      return v === 0 || v;
    });
  };
  fns.arr.flatten = function() {
    return this.reduce((function(a, b) {
      return a.concat(b);
    }), []);
  };
  fns.arr.print = function() {
    return console.log(JSON.stringify(this, null, 2));
  };
  fns.arr.printf = fns.arr.print;
  fns.arr.console = fns.arr.print;
  fns.arr.log = fns.arr.print;
  fns.arr.shuffle = function() {
    return this.sort(function(a, b) {
      return Math.round(Math.random()) - 0.5;
    });
  };
  fns.arr.randomize = fns.arr.shuffle;
  fns.arr.group_by = function(str) {
    var obj;
    obj = {};
    this.forEach(function(t) {
      if (!obj[t[str]]) {
        return obj[t[str]] = [t];
      } else {
        return obj[t[str]].push(t);
      }
    });
    return obj;
  };
  fns.arr.chunk_by = function(group_length) {
    var all, arr, i;
    all = [];
    arr = this;
    group_length = group_length || 1;
    for (i in arr) {
      if (i % group_length === 0) {
        all.push([arr[i]]);
      } else {
        all[all.length - 1].push(arr[i]);
      }
    }
    return all;
  };
  fns.arr.toobject = function(values) {
    var i, l, list, result;
    list = this;
    if (list == null) {
      return {};
    }
    result = {};
    i = 0;
    l = list.length;
    while (i < l) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
      i++;
    }
    return result;
  };
  fns.arr.to_obj = fns.arr.toobject;
  fns.arr.spotcheck = function(max) {
    var x;
    max = max || 10;
    x = this.randomize();
    return x.slice(0, max);
  };
  fns.arr.first = function(filt) {
    var match;
    filt = filt || 1;
    if (typeof filt === "function") {
      match = void 0;
      this.some(function(v) {
        if (filt(v)) {
          match = v;
          return true;
        } else {
          return false;
        }
      });
      return match;
    } else {
      if (typeof filt === "number") {
        return this.slice(0, filt);
      }
    }
  };
  fns.arr.top = fns.arr.first;
  fns.arr.last = function() {
    return this[this.length - 1];
  };
  fns.arr.head = function(max) {
    max = max || 10;
    return fns.arr.first(max);
  };
  fns.arr.sort_by = function(k) {
    return this.sort(function(a, b) {
      return b[k] - a[k];
    });
  };
  fns.obj.values = function() {
    var obj;
    obj = this;
    return Object.keys(this).map(function(v) {
      return obj[v];
    });
  };
  fns.obj.keys = function() {
    return Object.keys(this);
  };
  fns.obj.map = function(fn) {
    var obj;
    obj = this;
    return Object.keys(this).map(function(v) {
      return fn(obj[v], v);
    });
  };
  fns.obj.each = function(fn) {
    var obj;
    obj = this;
    return Object.keys(this).map(function(v) {
      return fn(obj[v], v);
    });
  };
  fns.obj.toarr = function() {
    var arr, i;
    arr = [];
    for (i in this) {
      arr.push([i, this[i]]);
    }
    return arr;
  };
  fns.obj.to_arr = fns.obj.toarr;
  fns.obj.to_a = fns.obj.toarr;
  fns.obj.size = function() {
    var key, size;
    size = 0;
    key = void 0;
    for (key in this) {
      if (this.hasOwnProperty(key)) {
        size += 1;
      }
    }
    return size;
  };
  fns.obj.filter = function(fn) {
    var arr, newobj, obj;
    obj = this;
    arr = Object.keys(this).filter(function(v) {
      return fn(obj[v], v);
    });
    newobj = {};
    arr.forEach(function(a) {
      return newobj[a] = obj[a];
    });
    return newobj;
  };
  fns.obj.extend = function(obj) {
    var i;
    for (i in obj) {
      this[i] = obj[i];
    }
    return this;
  };
  fns.obj.combine = fns.obj.extend;
  fns.obj.add = fns.obj.extend;
  fns.obj.print = function() {
    return console.log(JSON.stringify(this, null, 2));
  };
  fns.obj.printf = fns.obj.print;
  fns.obj.log = fns.obj.print;
  fns.obj.stats = function() {
    return this.to_arr().stat();
  };
  fns.obj.stat = fns.obj.stats;
  fns.obj.sort = function(fn) {
    var newobj, oldobj;
    fn = fn || function() {};
    newobj = {};
    oldobj = this;
    this.keys().sort(fn).forEach(function(v) {
      return newobj[v] = oldobj[v];
    });
    return newobj;
  };
  fns.obj.sort_keys = fns.obj.sort;
  fns.obj.sort_values = function() {
    return this.to_arr().sort_by([1]).to_obj();
  };
  fns.obj.to_tsv = function() {
    return console.log(this.values().join("\t"));
  };
  fns.obj.tsv = fns.obj.to_tsv;
  fns.str.isin = function(arr) {
    var word;
    word = this;
    return arr.some(function(v) {
      return word === v;
    });
  };
  fns.num.roof = function(max) {
    if (this > max) {
      return max;
    }
    return this;
  };
  fns.num.ceiling = fns.num.roof;
  fns.num.max = fns.num.roof;
  fns.num.floor = function(min) {
    if (this < min) {
      return min;
    }
    return this;
  };
  fns.num.min = fns.num.floor;
  fns.num.ground = fns.num.floor;
  fns.num.to_date = function() {
    var d;
    d = new Date();
    d.setTime(this);
    return d;
  };
  fns.num.date = fns.num.to_date;
  fns.num.to = function(stop, step) {
    var arr, i, start;
    start = this;
    if ((stop == null) || stop === undefined || stop === start) {
      return [];
    }
    step = step || 1;
    arr = [];
    if (stop > start) {
      i = start;
      while (i <= stop) {
        arr.push(i);
        i += step;
      }
    } else {
      i = start;
      while (i >= stop) {
        arr.push(i);
        i -= step;
      }
    }
    return arr;
  };
  fns.num.upto = fns.num.to;
  fns.num.ordinalize = function() {
    var n;
    n = this;
    switch (n % 10) {
      case 1:
        return n + "st";
      case 2:
        return n + "nd";
      case 3:
        return n + "rd";
      default:
        return n + "th";
    }
  };
  fns.num.ordinal = fns.num.ordinalize;
  fns.num.suffix = fns.num.ordinalize;
  fns.num.ordinate = fns.num.ordinalize;
  Object.keys(fns.obj).forEach(function(i) {
    return Object.defineProperty(Object.prototype, i, {
      value: fns.obj[i],
      configurable: true,
      enumerable: false
    });
  });
  Object.keys(fns.arr).forEach(function(i) {
    return Object.defineProperty(Array.prototype, i, {
      value: fns.arr[i],
      configurable: true,
      enumerable: false
    });
  });
  Object.keys(fns.str).forEach(function(i) {
    return Object.defineProperty(String.prototype, i, {
      value: fns.str[i],
      configurable: true,
      enumerable: false
    });
  });
  Object.keys(fns.num).forEach(function(i) {
    return Object.defineProperty(Number.prototype, i, {
      value: fns.num[i],
      configurable: true,
      enumerable: false
    });
  });
  dirty.undo = function() {
    return Object.keys(fns).forEach(function(i) {
      return Object.defineProperty(Array.prototype, i, {
        value: undefined
      });
    });
  };
  dirty.fix = dirty.undo;
  dirty.clean = dirty.undo;
  dirty.cleanup = dirty.undo;
  if (typeof define !== "undefined" && define.amd) {
    define([], function() {
      return dirty;
    });
  } else {
    if (typeof module !== "undefined" && module.exports) {
      module.exports = dirty;
    }
  }
  return dirty;
})();

x = 99;

x = x.ceiling(90);

x.print();

/*
//@ sourceMappingURL=index.map
*/
