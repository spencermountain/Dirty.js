// Generated by CoffeeScript 1.6.3
var arr, r;

arr = (function() {
  var alias, blurb, test;
  arr = {};
  alias = {};
  blurb = {};
  test = {};
  arr.grab = function(p) {
    if (typeof p === "object" && p.length) {
      return this.map(function(s) {
        return p.map(function(f) {
          return s[f];
        });
      });
    }
    return this.map(function(s) {
      return s[p];
    });
  };
  alias.grab = ['collect', 'transform', 'pluck'];
  test.grab = [
    [
      [
        {
          a: 4,
          b: 2
        }, {
          a: 9
        }, {
          b: 8
        }
      ].grab('a'), [4, 9, null]
    ]
  ];
  arr.prepend = Array.prototype.unshift;
  arr.append = Array.prototype.push;
  arr.clone = function() {
    return JSON.parse(JSON.stringify(this));
  };
  arr.copy = arr.clone;
  arr.spigot = function(fn) {
    var all;
    arr = this;
    all = {
      "true": [],
      "false": []
    };
    arr.forEach(function(v) {
      if (fn(v)) {
        return all["true"].push(v);
      } else {
        return all["false"].push(v);
      }
    });
    return all;
  };
  arr.moses = arr.spigot;
  arr.max = function(field) {
    if (field) {
      return this.sort(function(a, b) {
        return b[field] - [field];
      })[0];
    }
    return Math.max.apply(null, this);
  };
  arr.mean_average_precision = function(results) {
    var found, precisions;
    if (results.length === 0 && this.length === 0) {
      return 1;
    }
    precisions = [];
    found = 0;
    this.forEach(function(w, i) {
      var precision;
      i++;
      if (results.some(function(s) {
        return s === w;
      })) {
        found++;
      }
      precision = found / i;
      return precisions.push(precision);
    });
    return precisions.average();
  };
  arr.to_tsv = function() {
    return console.log(this.join("\t"));
  };
  arr.tsv = arr.to_tsv;
  arr.recall = function(wanted) {
    var overlap, results;
    results = this;
    if (wanted.length === 0) {
      return 0;
    }
    overlap = results.overlap(wanted).length;
    return overlap / wanted.length;
  };
  arr.precision = function(wanted) {
    var overlap, results;
    results = this;
    if (results.length === 0) {
      return 0;
    }
    overlap = results.overlap(wanted).length;
    return overlap / results.length;
  };
  arr.sum = function(field) {
    if (field) {
      return this.reduce(function(a, b) {
        return a + b[field];
      }, 0);
    }
    return this.reduce((function(a, b) {
      return a + b;
    }), 0);
  };
  arr.percentage = function(fn) {
    var passes;
    passes = this.filter(fn);
    return parseInt((passes.length / this.length) * 100);
  };
  arr.select = Array.prototype.filter;
  arr.must = arr.select;
  arr.reject = function(filter) {
    if (typeof filter === "function") {
      return this.filter(function(v) {
        return !filter(v);
      });
    } else if (typeof filter === "number" || typeof filter === "string") {
      return this.filter(function(v) {
        return v !== filter;
      });
    } else if (typeof filter === "object") {
      filter = JSON.stringify(filter);
      return this.filter(function(v) {
        return JSON.stringify(v) !== filter;
      });
    }
  };
  arr.kill = arr.reject;
  arr.remove = arr.reject;
  arr.average = function(field) {
    var sum;
    if (this.length === 0) {
      return 0;
    }
    sum = 0;
    if (field) {
      sum = this.reduce(function(a, b) {
        return a + b[field];
      }, 0);
    } else {
      sum = this.reduce(function(a, b) {
        return a + b;
      }, 0);
    }
    return sum / this.length;
  };
  arr.mean = arr.average;
  arr.strings = function() {
    return this.filter(function(v) {
      return typeof v === "string";
    });
  };
  arr.numbers = function() {
    return this.filter(function(v) {
      return typeof v === "object";
    });
  };
  arr.objects = function() {
    return this.filter(function(v) {
      return typeof v === "object";
    });
  };
  arr.truthy = function() {
    return this.filter(function(v) {
      return v;
    });
  };
  arr.duplicates = function(field) {
    var i, results;
    arr = this;
    if (field) {
      arr = arr.grab(field);
    }
    arr = arr.sort();
    results = [];
    i = 0;
    while (i < arr.length - 1) {
      if (arr[i + 1] === arr[i]) {
        results.push(arr[i]);
      }
      i++;
    }
    return results;
  };
  arr.dupes = arr.duplicates;
  arr.overlap = function(arr2) {
    return this.filter(function(v) {
      return arr2.some(function(v2) {
        return v === v2;
      });
    });
  };
  arr.intersection = arr.overlap;
  arr.isin = arr.overlap;
  arr.just = arr.overlap;
  arr.missing_from = function(arr2) {
    return this.filter(function(v) {
      return !arr2.some(function(v2) {
        return v === v2;
      });
    });
  };
  arr.has_overlap = function(arr2) {
    return this.some(function(v) {
      return arr2.some(function(v2) {
        return v === v2;
      });
    });
  };
  arr.overlaps = arr.has_overlap;
  arr.topk = function(verbose) {
    var freq, i, length, myArray, newArray, value;
    myArray = this;
    newArray = [];
    length = myArray.length || 1;
    freq = {};
    i = myArray.length - 1;
    i = void 0;
    while (i > -1) {
      value = myArray[i];
      if (freq[value] == null) {
        freq[value] = 1;
      } else {
        freq[value]++;
      }
      i--;
    }
    for (value in freq) {
      newArray.push(value);
    }
    newArray = newArray.sort(function(a, b) {
      return freq[b] - freq[a];
    }).map(function(v) {
      return {
        value: v,
        count: freq[v],
        percentage: ((freq[v] / length) * 100).toFixed(2)
      };
    });
    if (verbose) {
      return newArray;
    } else {
      return newArray.map(function(s) {
        return s.value;
      });
    }
  };
  arr.freq = arr.topk;
  arr.frequency = arr.topk;
  arr.each = function(fn) {
    return this.forEach(fn);
  };
  arr.loop = arr.each;
  arr.uniq = function() {
    var a, i, l, u;
    u = {};
    a = [];
    i = 0;
    l = this.length;
    while (i < l) {
      if (u.hasOwnProperty(this[i])) {
        continue;
      }
      a.push(this[i]);
      u[this[i]] = 1;
      ++i;
    }
    return a;
  };
  arr.unique = arr.uniq;
  arr.uniq_by = arr.uniq;
  arr.unique_by = arr.uniq;
  arr.compact = function() {
    return this.filter(function(v) {
      if (Object.prototype.toString.call(v) === "[object Array]" && v.length === 0) {
        return false;
      }
      if (Object.prototype.toString.call(v) === "[object Object]" && v.keys.length === 0) {
        return false;
      }
      return v === 0 || v;
    });
  };
  arr.flatten = function() {
    return this.reduce((function(a, b) {
      return a.concat(b);
    }), []);
  };
  arr.print = function() {
    return console.log(JSON.stringify(this, null, 2));
  };
  arr.printf = arr.print;
  arr.console = arr.print;
  arr.log = arr.print;
  arr.shuffle = function() {
    return this.sort(function(a, b) {
      return Math.round(Math.random()) - 0.5;
    });
  };
  arr.randomize = arr.shuffle;
  arr.group_by = function(str) {
    var obj;
    obj = {};
    this.forEach(function(t) {
      if (!obj[t[str]]) {
        return obj[t[str]] = [t];
      } else {
        return obj[t[str]].push(t);
      }
    });
    return obj;
  };
  arr.chunk_by = function(group_length) {
    var all, i;
    all = [];
    arr = this;
    group_length = group_length || 1;
    for (i in arr) {
      if (i % group_length === 0) {
        all.push([arr[i]]);
      } else {
        all[all.length - 1].push(arr[i]);
      }
    }
    return all;
  };
  arr.toobject = function(values) {
    var i, l, list, result;
    list = this;
    if (list == null) {
      return {};
    }
    result = {};
    i = 0;
    l = list.length;
    while (i < l) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
      i++;
    }
    return result;
  };
  arr.to_obj = arr.toobject;
  arr.spotcheck = function(max) {
    var x;
    max = max || 10;
    x = this.randomize();
    return x.slice(0, max);
  };
  arr.first = function(filt) {
    var match;
    filt = filt || 1;
    if (typeof filt === "function") {
      match = void 0;
      this.some(function(v) {
        if (filt(v)) {
          match = v;
          return true;
        } else {
          return false;
        }
      });
      return match;
    } else {
      if (typeof filt === "number") {
        return this.slice(0, filt);
      }
    }
  };
  arr.top = arr.first;
  arr.last = function() {
    return this[this.length - 1];
  };
  arr.head = function(max) {
    max = max || 10;
    return arr.first(max);
  };
  arr.sort_by = function(k) {
    return this.sort(function(a, b) {
      return b[k] - a[k];
    });
  };
  return Object.keys(arr).forEach(function(i) {
    return Object.defineProperty(Array.prototype, i, {
      value: arr[i],
      configurable: true,
      enumerable: false
    });
  });
})();

r = [2, 3, 4, 5];

r.overlap([3, 4, 88, 8]).print();
